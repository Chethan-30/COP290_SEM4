#include "gameobject.h"
#include "texturemng.h"
#include "game.h"
int pathlength=0;
int direction=0;
int l[33][60]=
//0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
{{50,50,50,50,52,52,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,44,44,44,44,56,52,52,50,44,44,44,44,44,44,44,44},
{50,50,50,50,51,51,51,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,51,44,44,51,51,58,58,58,58,58,51,44,51,51,51,51,44,44,56,51,51,51,50,44,51,51,44,51,51,44,44},
{50,50,51,51,51,51,51,51,51,51,51,50,50,50,51,51,50,50,50,50,50,50,50,50,50,51,51,51,50,51,44,51,51,58,58,58,58,58,51,51,51,51,53,51,51,51,56,51,51,51,50,50,44,51,44,44,51,44,44,51},
{50,51,51,50,51,51,53,53,53,53,51,50,50,50,50,51,50,50,50,50,50,50,50,51,51,51,50,51,51,51,44,51,58,58,58,58,58,51,51,51,51,53,53,53,51,51,51,51,51,51,50,50,51,51,51,51,51,51,51,51},
{50,50,50,50,51,51,53,53,53,53,51,50,50,51,51,51,51,51,51,51,50,50,50,51,50,50,50,51,51,51,44,51,58,58,58,58,51,51,51,51,51,51,53,53,51,51,51,51,57,50,50,50,51,44,51,44,44,51,44,44},
{50,50,50,50,51,51,53,53,53,53,51,50,51,51,50,51,44,44,44,51,51,51,51,51,50,50,50,51,44,51,44,51,51,51,51,58,51,51,51,58,58,51,51,51,51,51,51,51,50,50,50,51,51,44,51,44,44,51,44,52},
{50,50,51,51,51,51,58,53,53,53,51,51,51,50,50,51,44,44,44,51,44,44,44,51,51,51,51,51,44,51,44,44,44,44,51,51,51,51,58,58,58,58,51,51,51,51,57,51,50,50,50,50,51,44,51,44,44,51,51,52},
{50,51,51,50,51,51,58,53,53,53,51,50,50,50,50,51,51,51,51,51,51,51,51,51,44,44,44,44,51,51,51,51,51,44,51,51,51,51,51,58,58,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,44,44},
{50,50,50,50,51,51,53,53,53,53,51,50,50,50,50,51,44,44,44,44,44,44,44,44,44,52,51,51,51,44,44,44,51,44,51,51,58,58,51,51,51,51,51,51,57,44,44,44,44,44,44,44,51,44,51,44,44,51,44,44},
{50,50,50,50,51,51,53,53,53,53,51,50,51,51,50,51,44,44,44,44,44,51,51,44,44,52,51,44,44,44,44,44,51,58,51,51,58,58,58,51,51,51,51,57,58,58,44,51,44,44,51,51,51,44,51,44,55,51,44,44},
{50,50,50,50,51,51,53,53,53,53,51,51,51,50,58,51,44,44,44,44,44,51,44,44,44,44,51,51,51,51,51,51,51,58,51,51,51,51,51,51,51,51,57,58,51,51,44,51,44,44,51,44,51,44,51,44,55,51,44,44},
{50,50,51,51,51,51,53,53,53,53,51,50,50,50,58,51,44,44,44,44,44,51,54,44,44,44,44,44,44,44,44,44,44,58,51,44,44,51,51,51,51,51,58,58,51,58,44,51,44,44,51,51,51,51,51,51,51,51,44,44},
{50,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,57,51,58,58,58,58,44,51,44,44,51,44,44,44,44,44,44,51,44,44},
{50,50,50,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,57,58,51,51,58,51,51,51,51,44,44,51,44,44,44,44,44,44,51,44,44},
{51,50,50,50,51,51,53,53,53,53,51,58,58,44,51,51,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,51,44,58,58,51,58,58,51,44,44,44,44,44,51,51,51,51,51,51,51,51,51,51},
{50,50,51,51,51,51,53,53,53,51,51,58,58,55,51,51,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,51,44,51,51,51,58,58,51,44,44,44,44,44,51,44,44,44,51,44,44,51,44,51},
{50,51,51,50,51,51,53,53,53,51,44,44,44,55,51,51,44,44,44,44,53,53,53,44,53,53,53,53,53,44,53,53,44,53,53,53,44,51,44,44,58,58,58,58,51,44,44,51,51,51,51,44,44,44,51,44,44,51,44,51},
{50,50,50,50,51,51,51,51,51,51,44,44,44,44,51,51,44,44,44,44,53,53,53,44,53,53,53,53,53,44,53,53,44,53,53,53,44,51,51,44,44,44,44,44,51,51,51,51,44,44,44,44,44,44,51,44,44,51,44,44},
{50,51,50,50,51,51,44,44,44,44,44,58,58,44,51,51,44,44,44,44,53,53,53,44,44,44,44,44,44,44,53,53,44,53,53,53,44,44,44,44,44,44,44,44,51,44,44,51,44,44,44,44,44,44,51,44,44,51,44,44},
{50,51,50,50,51,51,44,58,58,58,44,58,58,44,51,51,44,44,44,44,53,53,53,44,53,53,53,53,53,44,53,58,58,58,53,53,44,44,44,51,44,44,44,44,51,44,44,51,51,51,51,51,51,51,51,51,51,51,44,44},
{51,51,51,51,51,51,44,58,58,58,44,44,44,44,51,51,44,44,44,44,53,53,53,44,53,53,53,53,53,44,53,58,58,58,53,53,44,44,44,51,44,44,44,44,51,44,44,51,44,44,51,44,44,44,44,44,51,51,44,44},
{44,51,44,44,51,51,44,44,44,44,44,44,44,44,51,51,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,51,44,44,44,44,51,44,44,51,44,44,51,44,44,44,44,44,51,51,44,44},
{44,51,44,44,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,52},
{44,51,44,51,51,51,44,44,51,44,51,44,44,44,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,52},
{52,51,44,44,51,51,51,51,51,51,51,44,44,44,44,44,51,44,44,44,51,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,51,51},
{52,51,51,51,51,51,44,44,51,44,44,44,44,44,44,44,51,44,44,44,51,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,51},
{44,44,44,44,51,51,44,44,51,44,44,44,44,44,51,51,51,44,44,44,51,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,51},
{44,44,51,44,51,51,44,44,51,51,44,44,44,44,44,44,44,44,44,44,51,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,51},
{44,51,51,51,51,51,44,44,44,44,44,44,44,44,51,51,44,44,44,44,51,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,51},
{44,51,44,44,51,51,44,44,44,51,51,51,44,44,51,44,44,51,51,44,51,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,51},
{44,51,44,44,51,51,44,44,44,51,44,51,44,51,51,44,51,51,44,44,51,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,51},
{44,51,44,44,51,51,51,51,51,51,51,51,44,51,51,51,51,44,58,58,51,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,51},
{44,51,51,51,51,51,44,44,44,51,44,44,52,52,44,51,44,44,58,58,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51}};

 int x=0;
  int y=0;
  int toggle2=0;
  int speed_control=0;
  int count2=0;
 
 SDL_Rect* Gameobject::gdrect(){ return &dRect;}
 SDL_Rect* Gameobject::gsrect(){ return &sRect;}

Gameobject::Gameobject( const char* tex,int x,int y){


objtexture=Texture::LoadTexture(tex);
xpos=x;
ypos=y;

}
void Gameobject::update(){
//xpos++;
//ypos++;

//while(SDL_PollEvent(&Game::event) != 0){
 if( Game::event.type == SDL_KEYDOWN )
                    {
                        //Select surfaces based on key press
                        switch( Game::event.key.keysym.sym )
                        {
                            case SDLK_UP:
                            if(l[(ypos/32)-1][xpos/32]==51)
                            {ypos=ypos-32;}
                            break;

                            case SDLK_DOWN:
                            if(l[(ypos/32)+1][xpos/32]==51)
                            {ypos=ypos+32;}
                            break;

                            case SDLK_LEFT:
                            if(l[ypos/32][(xpos/32)-1]==51)
                            {xpos=xpos-32;}
                            break;

                            case SDLK_RIGHT:
                            if(l[ypos/32][(xpos/32)+1]==51)
                           {xpos=xpos+32;}
                            break;

                            default:
                            
                            break;
                        }
                    }

//}

sRect.w=32;
sRect.h=32;
sRect.x=0;
sRect.y=0;


dRect.x=xpos;
dRect.y=ypos;
dRect.w=sRect.w;
dRect.h=sRect.h;


}

 void Gameobject::up(){
sRect.w=32;
sRect.h=32;
sRect.x=0;
sRect.y=0;


dRect.x=xpos;
dRect.y=ypos;
dRect.w=sRect.w;
dRect.h=sRect.h;

 }



void Gameobject::render(){

SDL_RenderCopy(Game::renderer,objtexture,&sRect,&dRect);

}

void Gameobject::move1(){
sRect.w=32;
sRect.h=32;
sRect.x=0;
sRect.y=0;


dRect.x=xpos;
dRect.y=ypos;
dRect.w=sRect.w;
dRect.h=sRect.h;






if(xpos>736 && count2==0){xpos=xpos-3;}
else if(xpos==734 && count2==0){xpos=xpos+3;count2=1;}
 else if(xpos<1340 && count2==1){xpos=xpos+3;}
 else if(xpos==1340 && count2==1){xpos=xpos-3;count2=0;}


}
 void Gameobject::move2(){
sRect.w=32;
sRect.h=32;
sRect.x=0;
sRect.y=0;


dRect.x=xpos;
dRect.y=ypos;
dRect.w=sRect.w;
dRect.h=sRect.h;
if(ypos>384 && count2==0){ypos=ypos-3;}
else if(ypos==383 && count2==0){/*xpos=xpos-32;*/ypos=ypos+3;count2=1;}
 else if(ypos<608 && count2==1){ypos=ypos+3;}
 else if(ypos==608 && count2==1){/*xpos=xpos+32;*/ypos=ypos-3;count2=0;}
 




 }



 void Gameobject::move3(){
sRect.w=32;
sRect.h=32;
sRect.x=0;
sRect.y=0;


dRect.x=xpos;
dRect.y=ypos;
dRect.w=sRect.w;
dRect.h=sRect.h;

if(ypos>736 && count2==0){ypos=ypos-3;}
else if(ypos==738 && count2==0){xpos=xpos-32;ypos=ypos+3;count2=1;}
 else if(ypos<960 && count2==1){ypos=ypos+3;}
 else if(ypos==960 && count2==1){xpos=xpos+32;ypos=ypos-3;count2=0;}

 }



 void Gameobject::move4(){
sRect.w=32;
sRect.h=32;
sRect.x=0;
sRect.y=0;


dRect.x=xpos;
dRect.y=ypos;
dRect.w=sRect.w;
dRect.h=sRect.h;

if(xpos<155 && count2==0){xpos=xpos+3;printf("%d\n",xpos);}
else if(xpos==157&& count2==0){xpos=xpos-3;count2=1;}
 else if(xpos>64 && count2==1){xpos=xpos-3;}
 else if(xpos==64 && count2==1){xpos=xpos+3;count2=0;}

 }


 void Gameobject::move5(){
sRect.w=32;
sRect.h=32;
sRect.x=0;
sRect.y=0;


dRect.x=xpos;
dRect.y=ypos;
dRect.w=sRect.w;
dRect.h=sRect.h;



if(xpos>200 && count2==0){xpos=xpos-3;}
else if(xpos==198 && count2==0){xpos=xpos+3;count2=1;}
 else if(xpos<498 && count2==1){xpos=xpos+3;}
 else if(xpos==498 && count2==1){xpos=xpos-3;count2=0;}

 }


 void Gameobject::move6(){
sRect.w=32;
sRect.h=32;
sRect.x=0;
sRect.y=0;


dRect.x=xpos;
dRect.y=ypos;
dRect.w=sRect.w;
dRect.h=sRect.h;

if(xpos>512 && count2==0){xpos=xpos-3;}
else if(xpos==512 && count2==0){xpos=xpos+3;count2=1;}
 else if(xpos<1056 && count2==1){xpos=xpos+3;}
 else if(xpos==1056 && count2==1){xpos=xpos-3;count2=0;}


 }


 void Gameobject::move7(){
sRect.w=32;
sRect.h=32;
sRect.x=0;
sRect.y=0;


dRect.x=xpos;
dRect.y=ypos;
dRect.w=sRect.w;
dRect.h=sRect.h;
if(ypos<734 && count2==0){ypos=ypos+3;}
else if(ypos==734 && count2==0){ypos=ypos-3;count2=1;}
 else if(ypos<608 && count2==1){ypos=ypos-3;}
 else if(ypos==608 && count2==1){ypos=ypos+3;count2=0;}

 }


 void Gameobject::move8(){
sRect.w=32;
sRect.h=32;
sRect.x=0;
sRect.y=0;


dRect.x=xpos;
dRect.y=ypos;
dRect.w=sRect.w;
dRect.h=sRect.h;

if(ypos>599 && count2==0){ypos=ypos-3;}
else if(ypos==599 && count2==0){xpos=xpos-32;ypos=ypos+3;count2=1;}
 else if(ypos<608 && count2==1){ypos=ypos+3;}
 else if(ypos==608 && count2==1){xpos=xpos+32;ypos=ypos-3;count2=0;}


 }


 void Gameobject::move9(){
sRect.w=32;
sRect.h=32;
sRect.x=0;
sRect.y=0;


dRect.x=xpos;
dRect.y=ypos;
dRect.w=sRect.w;
dRect.h=sRect.h;

if(xpos>195 && count2==0){xpos=xpos-3;}
else if(xpos==195 && count2==0){xpos=xpos+3;count2=1;}
 else if(xpos<288 && count2==1){xpos=xpos+3;}
 else if(xpos==288 && count2==1){xpos=xpos-3;count2=0;}

 }


 void Gameobject::move10(){
sRect.w=32;
sRect.h=32;
sRect.x=0;
sRect.y=0;


dRect.x=xpos;
dRect.y=ypos;
dRect.w=sRect.w;
dRect.h=sRect.h;


if(direction==0){

    xpos=xpos-1;
    if(pathlength==480){pathlength=0; direction=1;}
}
else{
    xpos=xpos+1;
    if(pathlength==480){pathlength=0; direction=0;}
}
pathlength++;

 }

 





